kubeadm token create --print-join-command
kubectl label node "your node-name" node-role.kubernetes.io/node1=


kubectl get namespace nginx-mesh -o json > nginx-mesh.json
kubectl replace --raw "/api/v1/namespaces/nginx-mesh/finalize" -f ./nginx-mesh.json
kubeclt api-resources 


Adding node to old master

Step1 : Generate token 
kubeadm token generate
Output - exmaple --> thp9b0k.1g9tqz8vkf78ucwf
Step2: Copy token to create and generate print join command
kubeadm token create hp9b0k.1g9tqz8vkf78ucwf --print-join-command
Step3: Run step 2 output on worker node
Finish
etcd-ip-172-31-43-15

ETCDCTL_API=3 etcdctl --endpoints 172.31.43.15:2379
--cert=/etc/kubernetes/pki/etcd/server.crt
--key=/etc/kubernetes/pki/etcd/server.key
--cacert=/etc/kubernetes/pki/etcd/ca.crt
snapshot save backup

anchore-cli --url http://localhost:8228/v1 --u admin --p foobar system status
apiVersion: v1
kind: Pod
metadata:
  name: demopod
spec:
  containers:
  - name: demopod
    image: docker.io/giriraj789/demopod:v1
    resources:
      requests:
        memory: "64000Mi"
        cpu: "250m"
      limits:
        memory: "128000Mi"
        cpu: "500m"
https://discuss.kubernetes.io/t/how-to-create-user-in-kubernetes-cluster-and-give-it-access/9101/4
kubectl drain <node-name> --ignore-daemonsets
kubectl uncordon <node-name>
